{
  "config": {
    "configFile": "C:\\Users\\conta\\Projects\\playwright-vetlog\\playwright.config.ts",
    "rootDir": "C:/Users/conta/Projects/playwright-vetlog/tests",
    "forbidOnly": false,
    "fullyParallel": true,
    "globalSetup": null,
    "globalTeardown": null,
    "globalTimeout": 0,
    "grep": {},
    "grepInvert": null,
    "maxFailures": 0,
    "metadata": {
      "actualWorkers": 1
    },
    "preserveOutput": "always",
    "reporter": [
      [
        "html",
        null
      ],
      [
        "json",
        {
          "outputFile": "test-results.json"
        }
      ]
    ],
    "reportSlowTests": {
      "max": 5,
      "threshold": 15000
    },
    "quiet": false,
    "projects": [
      {
        "outputDir": "C:/Users/conta/Projects/playwright-vetlog/test-results",
        "repeatEach": 1,
        "retries": 0,
        "id": "chromium",
        "name": "chromium",
        "testDir": "C:/Users/conta/Projects/playwright-vetlog/tests",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 60000
      },
      {
        "outputDir": "C:/Users/conta/Projects/playwright-vetlog/test-results",
        "repeatEach": 1,
        "retries": 0,
        "id": "firefox",
        "name": "firefox",
        "testDir": "C:/Users/conta/Projects/playwright-vetlog/tests",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 60000
      },
      {
        "outputDir": "C:/Users/conta/Projects/playwright-vetlog/test-results",
        "repeatEach": 1,
        "retries": 0,
        "id": "webkit",
        "name": "webkit",
        "testDir": "C:/Users/conta/Projects/playwright-vetlog/tests",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 60000
      }
    ],
    "shard": null,
    "updateSnapshots": "missing",
    "version": "1.38.1",
    "workers": 8,
    "webServer": null
  },
  "suites": [
    {
      "title": "visual\\list.spec.ts",
      "file": "visual/list.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [
        {
          "title": "should list my pets",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 60000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 0,
                  "status": "passed",
                  "duration": 28641,
                  "errors": [],
                  "stdout": [
                    {
                      "text": "Visual test results TestResultsSummaryData {\n  _summary: {\n    results: [ \u001b[36m[Object]\u001b[39m, \u001b[36m[Object]\u001b[39m, \u001b[36m[Object]\u001b[39m, \u001b[36m[Object]\u001b[39m, \u001b[36m[Object]\u001b[39m, \u001b[36m[Object]\u001b[39m ],\n    passed: \u001b[33m6\u001b[39m,\n    unresolved: \u001b[33m0\u001b[39m,\n    failed: \u001b[33m0\u001b[39m,\n    exceptions: \u001b[33m0\u001b[39m,\n    mismatches: \u001b[33m0\u001b[39m,\n    missing: \u001b[33m0\u001b[39m,\n    matches: \u001b[33m0\u001b[39m\n  },\n  _core: {\n    openEyes: \u001b[36m[AsyncFunction: openEyes]\u001b[39m,\n    openFunctionalSession: \u001b[36m[AsyncFunction: openFunctionalSession]\u001b[39m,\n    locate: \u001b[36m[AsyncFunction: locate]\u001b[39m,\n    locateText: \u001b[36m[AsyncFunction: locateText]\u001b[39m,\n    extractText: \u001b[36m[AsyncFunction: extractText]\u001b[39m,\n    closeBatch: \u001b[36m[AsyncFunction: closeBatch]\u001b[39m,\n    deleteTest: \u001b[36m[AsyncFunction: deleteTest]\u001b[39m,\n    getAccountInfo: \u001b[36m[AsyncFunction: getAccountInfo]\u001b[39m,\n    logEvent: \u001b[36m[AsyncFunction: logEvent]\u001b[39m,\n    base: {\n      openEyes: \u001b[36m[AsyncFunction: openEyes]\u001b[39m,\n      openFunctionalSession: \u001b[36m[AsyncFunction: openFunctionalSession]\u001b[39m,\n      locate: \u001b[36m[AsyncFunction: locate]\u001b[39m,\n      locateText: \u001b[36m[AsyncFunction: locateText]\u001b[39m,\n      extractText: \u001b[36m[AsyncFunction: extractText]\u001b[39m,\n      closeBatch: \u001b[36m[AsyncFunction: closeBatch]\u001b[39m,\n      deleteTest: \u001b[36m[AsyncFunction: deleteTest]\u001b[39m,\n      getAccountInfo: \u001b[36m[Function]\u001b[39m,\n      logEvent: \u001b[36m[AsyncFunction: logEvent]\u001b[39m\n    },\n    getViewportSize: \u001b[36m[AsyncFunction: getViewportSize]\u001b[39m,\n    setViewportSize: \u001b[36m[AsyncFunction: setViewportSize]\u001b[39m,\n    getNMLClient: [Function: funcWithCache] {\n      clearCache: \u001b[36m[Function (anonymous)]\u001b[39m,\n      getCachedValues: \u001b[36m[Function (anonymous)]\u001b[39m,\n      setCachedValue: \u001b[36m[Function (anonymous)]\u001b[39m\n    },\n    getECClient: [Function: funcWithCache] {\n      clearCache: \u001b[36m[Function (anonymous)]\u001b[39m,\n      getCachedValues: \u001b[36m[Function (anonymous)]\u001b[39m,\n      setCachedValue: \u001b[36m[Function (anonymous)]\u001b[39m\n    },\n    makeManager: \u001b[36m[AsyncFunction: makeManager]\u001b[39m\n  }\n}\n"
                    }
                  ],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2023-11-05T17:34:41.886Z",
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "f7c4a72a347b1466da4d-68435e227f42dabc5d6f",
          "file": "visual/list.spec.ts",
          "line": 19,
          "column": 5
        }
      ]
    }
  ],
  "errors": []
}